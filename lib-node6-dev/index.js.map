{"version":3,"sources":["../src/index.js"],"names":["SentryHandler","mapToSentryLevel","TRACE","DEBUG","INFO","WARNING","ERROR","FATAL","EMERGENCY","createHandler","ravenUrl","getUser","getTags","ravenClient","record","key","level","metadata","extra","error","extraData","originalError","parsedStack","stackTrace","toArray","captureError","logger","user","tags","minLevel","options","handle"],"mappings":";;;;;;;;kBA8CwBA,a;;;;;;AA9CxB;;AACA;;;;;;AAEA,MAAMC,mBAAmB;AACvB,GAAC,4BAAOC,KAAR,GAAgB,OADO;AAEvB,GAAC,4BAAOC,KAAR,GAAgB,OAFO;AAGvB,GAAC,4BAAOC,IAAR,GAAe,MAHQ;AAIvB,GAAC,4BAAOC,OAAR,GAAkB,SAJK;AAKvB,GAAC,4BAAOC,KAAR,GAAgB,OALO;AAMvB,GAAC,4BAAOC,KAAR,GAAgB,OANO;AAOvB,GAAC,4BAAOC,SAAR,GAAoB;AAPG,CAAzB;;AAUA,MAAMC,gBAAgB,CAACC,QAAD,EAAW,EAAEC,UAAU,MAAM,CAAE,CAApB,EAAsBC,UAAU,MAAM,CAAE,CAAxC,OAAX,KAA+D;AACnF,QAAMC,cAAc,kBAAgBH,QAAhB,CAApB;;AAEA,SAAQI,MAAD,IAAY;AACjB,UAAM,EAAEC,GAAF,EAAOC,KAAP,EAAcC,QAAd,EAAwBC,KAAxB,KAAkCJ,MAAxC;AACA,QAAIK,QAAQF,YAAYA,SAASE,KAAjC;;AAEA,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,UAAMC,yBAAiBH,QAAjB,IAA2BC,KAA3B,GAAN;AACA,WAAOE,UAAUD,KAAjB;;AAEA,QAAIA,MAAME,aAAV,EAAyB;AACvB;AACAD,gBAAUE,WAAV,GAAwBH,MAAMI,UAAN,CAAiBC,OAAjB,EAAxB;AACAL,cAAQA,MAAME,aAAd;AACD;;AAEDR,gBAAYY,YAAZ,CACEN,KADF,EAEE;AACEO,cAAQX,GADV;AAEEC,aAAOf,iBAAiBe,KAAjB,KAA2B,OAFpC;AAGEE,aAAOE,SAHT;AAIEO,YAAMhB,QAAQG,MAAR,CAJR;AAKEc,YAAMhB,QAAQE,MAAR;AALR,KAFF;AAUD,GA3BD;AA4BD,CA/BD;;AAiCe,SAASd,aAAT,CAAuBU,QAAvB,EAAyCmB,QAAzC,EAA2DC,OAA3D,EAAoE;AAAA,UAA7CpB,QAA6C;;AAAA,UAA3BmB,QAA2B;;AACjF,OAAKA,QAAL,GAAgBA,QAAhB;AACA,OAAKE,MAAL,GAActB,cAAcC,QAAd,EAAwBoB,OAAxB,CAAd;AACD","file":"index.js","sourcesContent":["import { Client as RavenClient } from 'raven';\nimport levels from 'nightingale-levels';\n\nconst mapToSentryLevel = {\n  [levels.TRACE]: 'debug',\n  [levels.DEBUG]: 'debug',\n  [levels.INFO]: 'info',\n  [levels.WARNING]: 'warning',\n  [levels.ERROR]: 'error',\n  [levels.FATAL]: 'fatal',\n  [levels.EMERGENCY]: 'fatal',\n};\n\nconst createHandler = (ravenUrl, { getUser = () => {}, getTags = () => {} } = {}) => {\n  const ravenClient = new RavenClient(ravenUrl);\n\n  return (record) => {\n    const { key, level, metadata, extra } = record;\n    let error = metadata && metadata.error;\n\n    if (!error) {\n      return;\n    }\n\n    const extraData = { ...metadata, extra };\n    delete extraData.error;\n\n    if (error.originalError) {\n      // error-processor\n      extraData.parsedStack = error.stackTrace.toArray();\n      error = error.originalError;\n    }\n\n    ravenClient.captureError(\n      error,\n      {\n        logger: key,\n        level: mapToSentryLevel[level] || 'error',\n        extra: extraData,\n        user: getUser(record),\n        tags: getTags(record),\n      },\n    );\n  };\n};\n\nexport default function SentryHandler(ravenUrl: string, minLevel: number, options) {\n  this.minLevel = minLevel;\n  this.handle = createHandler(ravenUrl, options);\n}\n"]}